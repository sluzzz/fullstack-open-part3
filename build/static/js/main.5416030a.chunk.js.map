{"version":3,"sources":["components/Person.js","components/Filter.js","components/PersonForm.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Number","person","onClick","name","number","id","Filter","onChange","PersonForm","onSubmit","onNameChange","onNumberChange","nameVal","numberVal","value","type","Notification","message","className","baseUrl","axios","get","object","post","delete","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","personsFiltered","setPersonsFiltered","clicked","setClicked","useEffect","personService","then","response","data","toLowerCase","search","handleDeleteClick","e","target","preventDefault","personObject","i","length","alert","concat","map","Person","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5416030a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Number = ({ person, onClick }) => {\r\n  return (\r\n    <div>\r\n      {person.name} {person.number}{' '}\r\n      <button id={person.id} onClick={onClick} name={person.name}>\r\n        delete\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Number;\r\n","import React from 'react';\r\n\r\nconst Filter = ({ onChange }) => {\r\n  return (\r\n    <div>\r\n      filter shown with\r\n      <input onChange={onChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\nconst PersonForm = ({\r\n  onSubmit,\r\n  onNameChange,\r\n  onNumberChange,\r\n  nameVal,\r\n  numberVal\r\n}) => {\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit}>\r\n        <div>\r\n          name: <input onChange={onNameChange} value={nameVal} />\r\n        </div>\r\n        <div>\r\n          number: <input onChange={onNumberChange} value={numberVal} />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className=\"notification\">{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import axios from 'axios';\r\nconst baseUrl = '/api/persons';\r\n// const baseUrl = 'https://fullstack-open-phonebook-f.herokuapp.com/api/persons';\r\n// const baseUrl = 'http://localhost:3001/api/persons';\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl);\r\n};\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject);\r\n};\r\n\r\nconst post = object => {\r\n  return axios.post(baseUrl, object);\r\n};\r\n\r\nconst deletePerson = id => {\r\n  return axios.delete(`${baseUrl}/${id}`);\r\n};\r\n\r\nconst put = (id, changedPerson) => {\r\n  return axios.put(`${baseUrl}/${id}`, changedPerson);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update,\r\n  post,\r\n  put,\r\n  del: deletePerson\r\n};\r\n","import React, { useState, useEffect } from 'react';\nimport Person from './components/Person';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Notification from './components/Notification';\nimport personService from './services/persons';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  const [personsFiltered, setPersonsFiltered] = useState([]);\n  const [clicked, setClicked] = useState(false);\n  // const [notification, setNotification] = useState('');\n\n  useEffect(() => {\n    personService.getAll().then(response => {\n      setPersons(response.data);\n    });\n  }, [clicked]);\n\n  useEffect(() => {\n    setPersonsFiltered(\n      persons.filter(person => person.name.toLowerCase().search(filter) !== -1)\n    );\n  }, [filter, persons, clicked]);\n  // todo rerender when clicking on a button\n\n  const addPerson = e => {\n    e.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber\n    };\n    for (let i = 0; i < persons.length; i++) {\n      if (persons[i].name === newName) {\n        alert(`${newName} is already added to the phonebook`);\n      } else {\n        setPersons(persons.concat(personObject));\n      }\n    }\n    personService.post(personObject);\n    //todo put instead of post so json server updates automatically\n\n    setNewName('');\n    setNewNumber('');\n  };\n\n  // todo number change\n  // const addPerson = e => {\n  //   e.preventDefault();\n  //   const personObject = {\n  //     name: newName,\n  //     number: newNumber\n  //   };\n  //   for (let i = 0; i < persons.length; i++) {\n  //     if (persons[i].name === newName) {\n  //       if (\n  //         window.confirm(\n  //           `${newName} is already added to the phonebook, replace the old number with a new one?`\n  //         )\n  //       ) {\n  //         const id = persons[i].id;\n  //         const changedPerson = { ...persons, number: newNumber };\n  //         personService.put(id, changedPerson).then(response => {\n  //           setPersons(\n  //             persons.map(person => (person.id !== id ? person : response.data))\n  //           );\n  //         });\n  //       }\n  //     } else {\n  //       setPersons(persons.concat(personObject));\n  //     }\n  //   }\n  //   personService.post(personObject);\n\n  //   setNewName('');\n  //   setNewNumber('');\n  // };\n\n  const handleNameChange = e => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumberChange = e => {\n    setNewNumber(e.target.value);\n  };\n\n  const handleFilterChange = e => {\n    setFilter(e.target.value.toLowerCase());\n  };\n\n  const handleDeleteClick = e => {\n    // if (window.confirm(`Delete ${e.target.name}?`)) {\n    //   personService.del(e.target.id);\n    // }\n    personService.del(e.target.id);\n\n    setClicked(!clicked);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={'notification'} />\n      <Filter onChange={handleFilterChange} />\n      <h2>add a new</h2>\n      <PersonForm\n        onSubmit={addPerson}\n        onNameChange={handleNameChange}\n        onNumberChange={handleNumberChange}\n        nameVal={newName}\n        numberVal={newNumber}\n      />\n      <h2>Numbers</h2>\n      {filter\n        ? personsFiltered.map(person => (\n            <Person\n              key={person.name}\n              person={person}\n              onClick={handleDeleteClick}\n            />\n          ))\n        : persons.map(person => (\n            <Person\n              key={person.name}\n              person={person}\n              onClick={handleDeleteClick}\n            />\n          ))}\n    </div>\n  );\n};\n\n// todo finish 2.18\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}